/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: Miaru3d (https://sketchfab.com/miaru3d)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/pearl-drone-splatoon-side-order-trailer-fc90b7685d4e49f4a6eb522dfb07dca1
Title: Pearl Drone - Splatoon Side Order Trailer
*/
import * as THREE from "three";
import { useRef, useEffect, useState } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { useFrame, useThree } from "@react-three/fiber";
import { a } from "@react-spring/three";
import pearldrone from '../assets/assets/3d/pearldrone.glb';
import { Environment } from '@react-three/drei';
import { Suspense } from 'react';

    const pearlDrone = ({ isRotating, setIsRotating, setCurrentStage, ...props}) => {
  const group = useRef();
  const { nodes, materials, animations } = useGLTF(pearldrone);
  const { gl, viewport } = useThree();
  const { actions } = useAnimations(animations, group);
  const actionRef = useRef();

  const lastX = useRef(0);
  const lastY = useRef(0);
  const rotationSpeed = useRef(0);
  const dampingFactor = 0.95;
        console.log(animations)
  useEffect(() => {
    if (actions && actions["Vertical"]) {
      actionRef.current = actions["Vertical"];
      actionRef.current.setLoop(THREE.LoopRepeat, Infinity); // Infinity will make it loop continuously
      actionRef.current.clampWhenFinished = false;
      actionRef.current.play();
    }
  }, [actions]);

  const handlePointerDown = (e) => {
    e.stopPropagation();
    e.preventDefault();
    setIsRotating(true);
  
    const clientX = e.touches ? e.touches[0].clientX : e.clientX;
    const clientY = e.touches ? e.touches[0].clientY : e.clientY;
  
    lastX.current = clientX;
    lastY.current = clientY;
  };

  const handlePointerUp = (e) => {
    e.stopPropagation();
    e.preventDefault();
    setIsRotating(false);
  };

  const handlePointerMove = (e) => {
    e.stopPropagation();
    e.preventDefault();
  
    if(isRotating) { 
      const clientX = e.touches ? e.touches[0].clientX : e.clientX;
      const clientY = e.touches ? e.touches[0].clientY : e.clientY;
      const deltaX = (clientX - lastX.current) / viewport.width;
      const deltaY = (clientY - lastY.current) / viewport.height;
  
      group.current.rotation.y += deltaX * Math.PI * 0.02;
      group.current.rotation.x += deltaY * Math.PI * 0.02;
  
      lastX.current = clientX;
      lastY.current = clientY;
  
      rotationSpeed.current = Math.sqrt(deltaX * deltaX + deltaY * deltaY) * 0.01 * Math.PI;
    }
  };

  const handlePointerLeave = (e) => {
    setIsRotating(false);
  };

  useFrame(() => {
    if(!isRotating) {
      rotationSpeed.current *= dampingFactor;

      if(Math.abs(rotationSpeed.current) < 0.001) {
        rotationSpeed.current = 0;
      }

      group.current.rotation.y += rotationSpeed.current;
    } else { 
      const rotation = group.current.rotation.y;
     /**
     * Normalize the rotation value to ensure it stays within the range [0, 2 * Math.PI].
     * The goal is to ensure that the rotation value remains within a specific range to
     * prevent potential issues with very large or negative rotation values.
     *  Here's a step-by-step explanation of what this code does:
     *  1. rotation % (2 * Math.PI) calculates the remainder of the rotation value when divided
     *     by 2 * Math.PI. This essentially wraps the rotation value around once it reaches a
     *     full circle (360 degrees) so that it stays within the range of 0 to 2 * Math.PI.
     *  2. (rotation % (2 * Math.PI)) + 2 * Math.PI adds 2 * Math.PI to the result from step 1.
     *     This is done to ensure that the value remains positive and within the range of
     *     0 to 2 * Math.PI even if it was negative after the modulo operation in step 1.
     *  3. Finally, ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI) applies another
     *     modulo operation to the value obtained in step 2. This step guarantees that the value
     *     always stays within the range of 0 to 2 * Math.PI, which is equivalent to a full
     *     circle in radians.
     */
     const normalizedRotation =
     ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);

   // Set the current stage based on the drone's orientation
   switch (true) {
     case normalizedRotation >= 5.45 && normalizedRotation <= 5.85:
       setCurrentStage(4);
       break;
     case normalizedRotation >= 0.85 && normalizedRotation <= 1.3:
       setCurrentStage(3);
       break;
     case normalizedRotation >= 2.4 && normalizedRotation <= 2.6:
       setCurrentStage(2);
       break;
     case normalizedRotation >= 4.25 && normalizedRotation <= 4.75:
       setCurrentStage(1);
       break;
     default:
       setCurrentStage(null);
   }
 }
});

useEffect(() => {
  const canvas = gl.domElement;
  canvas.addEventListener("pointerdown", handlePointerDown);
  canvas.addEventListener("pointerup", handlePointerUp);
  canvas.addEventListener("pointermove", handlePointerMove);
  canvas.addEventListener("pointerleave", handlePointerLeave);

  return () => {
    canvas.removeEventListener("pointerdown", handlePointerDown);
    canvas.removeEventListener("pointerup", handlePointerUp);
    canvas.removeEventListener("pointermove", handlePointerMove);
    canvas.removeEventListener("pointerleave", handlePointerLeave);
  };
}, [gl, handlePointerDown, handlePointerUp, handlePointerMove, handlePointerLeave]);



  return (
    <>
    <>
    <a.group ref={group} {...props} dispose={null}>
      <group name="Sketchfab_Scene">
        <group
          name="Sketchfab_model"
          rotation={[-Math.PI / 2, 0, 0]}
          scale={7}
        >
          <group
            name="9281ed46901044c1b72a2a833dfc8f2afbx"
            rotation={[Math.PI / 2, 0, 0]}
            scale={0.01}
          >
            <group name="Object_2">
              <group name="RootNode">
                <group
                  name="Plane"
                  position={[-1.328, 8.325, 0]}
                  rotation={[-1.345, -0.029, -1.696]}
                  scale={19.791}
                >
                  <mesh
                    name="Plane_MainBody_0"
                    castShadow
                    receiveShadow
                    geometry={nodes.Plane_MainBody_0.geometry}
                    material={materials.MainBody}
                  />
                </group>
                <group
                  name="Plane001"
                  position={[-1.328, 8.325, 0]}
                  rotation={[-1.541, 0.225, -0.132]}
                  scale={19.791}
                >
                  <mesh
                    name="Plane001_MainBody_0"
                    castShadow
                    receiveShadow
                    geometry={nodes.Plane001_MainBody_0.geometry}
                    material={materials.MainBody}
                  />
                </group>
                <group
                  name="Plane002"
                  position={[-1.328, 8.325, 0]}
                  rotation={[-1.796, 0.029, 1.446]}
                  scale={19.791}
                >
                  <mesh
                    name="Plane002_MainBody_0"
                    castShadow
                    receiveShadow
                    geometry={nodes.Plane002_MainBody_0.geometry}
                    material={materials.MainBody}
                  />
                </group>
                <group
                  name="Plane003"
                  position={[-1.328, 8.325, 0]}
                  rotation={[-1.6, -0.225, 3.01]}
                  scale={19.791}
                >
                  <mesh
                    name="Plane003_MainBody_0"
                    castShadow
                    receiveShadow
                    geometry={nodes.Plane003_MainBody_0.geometry}
                    material={materials.MainBody}
                  />
                </group>
                <group
                  name="Armature"
                  position={[-1.328, 2.666, 0]}
                  rotation={[-Math.PI / 2, 0, 0]}
                  scale={100}
                >
                  <group name="Object_13">
                    <primitive object={nodes._rootJoint} />
                    <skinnedMesh
                      name="Object_16"
                      geometry={nodes.Object_16.geometry}
                      material={materials.MainBody}
                      skeleton={nodes.Object_16.skeleton}
                    />
                    <group
                      name="Object_15"
                      position={[-1.328, 19.394, 0]}
                      scale={100}
                    />
                    <group
                      name="Circle"
                      position={[0, 0, 0.167]}
                      rotation={[Math.PI / 2, 0, 0]}
                    >
                      <mesh
                        name="Circle_MainBody_0"
                        castShadow
                        receiveShadow
                        geometry={nodes.Circle_MainBody_0.geometry}
                        material={materials.MainBody}
                      />
                      <mesh
                        name="Circle_UnderGlass_0"
                        castShadow
                        receiveShadow
                        geometry={nodes.Circle_UnderGlass_0.geometry}
                        material={materials.UnderGlass}
                      />
                      <group
                        name="Plane004"
                        position={[0, 0.035, 0.127]}
                        rotation={[-Math.PI / 2, 0, 0]}
                      >
                        <mesh
                          name="Plane004_EyeGlass_0"
                          castShadow
                          receiveShadow
                          geometry={nodes.Plane004_EyeGlass_0.geometry}
                          material={materials.EyeGlass}
                        />
                        <group
                          name="Circle008"
                          position={[0.07, 0.01, -0.033]}
                          rotation={[0.041, -0.095, -2.637]}
                        >
                          <mesh
                            name="Circle008_EyeEmit_0"
                            castShadow
                            receiveShadow
                            geometry={nodes.Circle008_EyeEmit_0.geometry}
                            material={materials.EyeEmit}
                          />
                        </group>
                        <group
                          name="Circle009"
                          position={[-0.03, -0.003, -0.043]}
                          rotation={[0, 0.045, 0]}
                          scale={0.503}
                        >
                          <mesh
                            name="Circle009_EyeEmit_0"
                            castShadow
                            receiveShadow
                            geometry={nodes.Circle009_EyeEmit_0.geometry}
                            material={materials.EyeEmit}
                          />
                        </group>
                      </group>
                      <group
                        name="Circle005"
                        position={[0.028, 0.055, 0.105]}
                        rotation={[-2.015, -0.105, 0.254]}
                      >
                        <mesh
                          name="Circle005_MainBody_0"
                          castShadow
                          receiveShadow
                          geometry={nodes.Circle005_MainBody_0.geometry}
                          material={materials.MainBody}
                        />
                      </group>
                      <group
                        name="Circle004"
                        position={[-0.028, 0.048, 0.116]}
                        rotation={[1.058, -0.08, 0.208]}
                      >
                        <mesh
                          name="Circle004_MainBody_0"
                          castShadow
                          receiveShadow
                          geometry={nodes.Circle004_MainBody_0.geometry}
                          material={materials.MainBody}
                        />
                      </group>
                      <group
                        name="Circle001"
                        position={[0.037, 0.094, 0.018]}
                        rotation={[-1.438, 0.269, -0.036]}
                      >
                        <mesh
                          name="Circle001_Crown_0"
                          castShadow
                          receiveShadow
                          geometry={nodes.Circle001_Crown_0.geometry}
                          material={materials.Crown}
                        />
                        <group name="Circle003">
                          <mesh
                            name="Circle003_MainBody_0"
                            castShadow
                            receiveShadow
                            geometry={nodes.Circle003_MainBody_0.geometry}
                            material={materials.MainBody}
                          />
                        </group>
                      </group>
                      <group
                        name="Circle002"
                        position={[-1.328, 19.394, 0]}
                        scale={100}
                      />
                      <group name="Circle007">
                        <mesh
                          name="Circle007_MainBody_0"
                          castShadow
                          receiveShadow
                          geometry={nodes.Circle007_MainBody_0.geometry}
                          material={materials.MainBody}
                        />
                      </group>
                    </group>
                  </group>
                </group>
              </group>
            </group>
          </group>
        </group>
      </group>
    </a.group>
    </>
    <Environment preset="sunset" />
    </>
  );
}

export default pearlDrone;
