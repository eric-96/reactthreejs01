/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: Barbo (https://sketchfab.com/barbo-autos)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/lincoln-continental-mark-v-09587fee473d4b07ac7f10d2a65b47c4
Title: Lincoln Continental Mark V
*/
import React, { useEffect, useRef, useState } from "react";
import { useGLTF, useAnimations, Environment, Html } from "@react-three/drei";
import { OrbitControls } from '@react-three/drei';
import cars from '../assets/assets/3d/cars.glb';
import * as THREE from 'three';
import { a } from '@react-spring/three';
import { useFrame, useThree } from "@react-three/fiber";

 const Cars = (props) => {
  const group = useRef();

  //FOR ANIMATIONS
  const { nodes, materials, animations } = useGLTF(cars
  );
  const { actions } = useAnimations(animations, group);
  const actionRef = useRef();
  
  //FOR CAMERA CHECKPOINTS NAVIGATION
  const [cameraPosition, setCameraPosition] = useState([0, 0, 5]);
  const { camera } = useThree();
  const v3 = ([x, y, z]) => new THREE.Vector3(x, y, z);
  
  useEffect(() => {
    camera.position.lerp(v3(cameraPosition), 0.1);
    camera.lookAt(0, 0, 0);
  }, [cameraPosition, camera]);
  
  const handleClick = (position) => {
    setCameraPosition(position);
    console.log(camera.position);
  };

/*   //ANIMATION LOOP
  useEffect(() => {
    if (actions && actions["Covers"]) {
      actionRef.current = actions["Covers"];
      actionRef.current.play();
  
      const intervalId = setInterval(() => {
        actionRef.current.stop();
        actionRef.current.play();
      }, 50000); // Change this to the desired interval in milliseconds
  
      return () => clearInterval(intervalId); // Clean up on component unmount
    }
  }, [actions]); */

  return (
    <>
    <>
    <group ref={group} {...props} dispose={null}>
      <group name="Sketchfab_Scene">
        <group name="Sketchfab_model" rotation={[-Math.PI / 2, 0, 0]}>
          <group name="root">
            <group name="GLTF_SceneRootNode" rotation={[Math.PI / 2, 0, 0]}>
              <group name="Pop_ups_0" position={[0.409, 0.6273, 0.1404]}>
                <mesh
                  name="Object_4"
                  castShadow={true}
                  receiveShadow={true}
                  geometry={nodes.Object_4.geometry}
                  material={materials.Paint}
                  onClick={() => handleClick([1, 2, 3])}
                  >
                    <Html position={[0, 0, 0]}>
                      <div>Click me</div>
                    </Html>
                    </mesh>
                <mesh
                  name="Object_5"
                  castShadow={true}
                  receiveShadow={true}
                  geometry={nodes.Object_5.geometry}
                  material={materials.Badges}
                />
              </group>
              <group
                name="Paint_1"
                position={[1.0004, 0.7239, -0.6899]}
                rotation={[Math.PI / 2, 0, -Math.PI / 2]}
              >
                <mesh
                  name="Object_7"
                  castShadow={true}
                  receiveShadow={true}
                  geometry={nodes.Object_7.geometry}
                  material={materials.Paint}
                />
              </group>
              <group
                name="Glass_IOR_2"
                position={[0.9975, 0.7239, -0.6899]}
                rotation={[Math.PI / 2, 0, -Math.PI / 2]}
              >
                <mesh
                  name="Object_9"
                  castShadow={true}
                  receiveShadow={true}
                  geometry={nodes.Object_9.geometry}
                  material={materials.Glass_IOR}
                />
              </group>
              <group
                name="Glass_3"
                position={[0.9975, 0.7239, -0.6899]}
                rotation={[Math.PI / 2, 0, -Math.PI / 2]}
              >
                <mesh
                  name="Object_11"
                  castShadow={true}
                  receiveShadow={true}
                  geometry={nodes.Object_11.geometry}
                  material={materials.Glass}
                />
              </group>
              <group
                name="Body_4"
                position={[1.0004, 0.7239, -0.6899]}
                rotation={[Math.PI / 2, 0, -Math.PI / 2]}
              >
                <mesh
                  name="Object_13"
                  castShadow={true}
                  receiveShadow={true}
                  geometry={nodes.Object_13.geometry}
                  material={materials.Body}
                />
                <mesh
                  name="Object_14"
                  castShadow={true}
                  receiveShadow={true}
                  geometry={nodes.Object_14.geometry}
                  material={materials.Badges}
                />
              </group>
              <group name="Badges_5" position={[0.6626, 0.6304, 0.1937]}>
                <mesh
                  name="Object_16"
                  castShadow={true}
                  receiveShadow={true}
                  geometry={nodes.Object_16.geometry}
                  material={materials.Badges}
                />
              </group>
              <group name="Badges_IOR_6" position={[0.6626, 0.6304, 0.1937]}>
                <mesh
                  name="Object_18"
                  castShadow={true}
                  receiveShadow={true}
                  geometry={nodes.Object_18.geometry}
                  material={materials.Badges_IOR}
                />
              </group>
              <group name="Wheels_7" position={[-0.8115, 0.3303, -0.6894]}>
                <mesh
                  name="Object_20"
                  castShadow={true}
                  receiveShadow={true}
                  geometry={nodes.Object_20.geometry}
                  material={materials.Wheel}
                />
              </group>
              <group
                name="Paint001_8"
                position={[-4.2467, 0.7239, -3.3654]}
                rotation={[Math.PI / 2, 0, 1.4175]}
              >
                <mesh
                  name="Object_22"
                  castShadow={true}
                  receiveShadow={true}
                  geometry={nodes.Object_22.geometry}
                  material={materials.PaintSec}
                />
                <mesh
                  name="Object_23"
                  castShadow={true}
                  receiveShadow={true}
                  geometry={nodes.Object_23.geometry}
                  material={materials.Glass_IOR}
                />
                <mesh
                  name="Object_24"
                  castShadow={true}
                  receiveShadow={true}
                  geometry={nodes.Object_24.geometry}
                  material={materials.Glass}
                />
                <mesh
                  name="Object_25"
                  castShadow={true}
                  receiveShadow={true}
                  geometry={nodes.Object_25.geometry}
                  material={materials.BodySec}
                />
                <mesh
                  name="Object_26"
                  castShadow={true}
                  receiveShadow={true}
                  geometry={nodes.Object_26.geometry}
                  material={materials.Badges}
                />
                <mesh
                  name="Object_27"
                  castShadow={true}
                  receiveShadow={true}
                  geometry={nodes.Object_27.geometry}
                  material={materials.Wheel}
                />
                <mesh
                  name="Object_28"
                  castShadow={true}
                  receiveShadow={true}
                  geometry={nodes.Object_28.geometry}
                  material={materials.Badges_IOR}
                />
              </group>
            </group>
          </group>
        </group>
      </group>

    </group>

    </>
    <mesh receiveShadow rotation={[-Math.PI / 2, 0, 0]} position={[-1.5, 0, -2.5]}>
      <primitive attach="geometry" object={new THREE.PlaneGeometry(10, 10)} />
      <meshStandardMaterial attach="material" color="white" />
    </mesh>
    <ambientLight intensity={0.5} />
    <OrbitControls enableRotate={true} />
    <Environment preset="warehouse" />
    
    </>
  );
}

useGLTF.preload(cars);


export default Cars;